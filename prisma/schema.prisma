datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated"
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  roleUser       RoleUser  @default(USER)

  accounts Account[]
  sessions Session[]
  history  History[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @unique
  expires      DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model History {
  id String @id @default(cuid())

  timestamp DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  videos Video[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId])
  @@index([userId])
}

model Video {
  id       String @id @unique
  title    String
  details  String @db.Text
  duration Float
  url      String

  history   History @relation(fields: [historyId], references: [id], onDelete: Cascade)
  historyId String

  timeline Timeline[]

  // un video puede tener un chat asociado o no

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chat Chat?

  @@index([historyId])
}

model Timeline {
  id          String @id @default(cuid())
  time        Float
  title       String
  description String @db.Text

  video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([videoId])
}

model Chat {
  id       String @id @default(cuid())
  messages Json   @db.JsonB

  video   Video? @relation(fields: [videoId], references: [id], onDelete: Cascade)
  videoId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum RoleUser {
  ADMIN
  USER
}
